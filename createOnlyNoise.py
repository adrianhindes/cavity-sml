# Running Finesse
import subprocess
# Editing kat file
import fileinput
# Copying files
import shutil
# Adding Gaussian noise
from skimage import io, util
# Navigating directories
import os
# Cropping raw images
from PIL import Image
# Nice loading bars for loops
# Keras preprocessing package for augmentation
from keras.preprocessing.image import ImageDataGenerator, array_to_img, \
    img_to_array, load_img


'''
Just generate noisy images, if raw ones have already
been generated by Finesse
'''

maxMode = 6

# Define data folders
dataFolder = 'rawData'
newDataFolder = 'newData'

# Image extension
ext = '.png'

# No. images to generate per raw image
imageNum = 100
# Preprocessing
# Data generators, using Keras
trainDatagen = ImageDataGenerator(
        rotation_range=30,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')
testDatagen = ImageDataGenerator(
        rotation_range=25,
        width_shift_range=0.1,
        height_shift_range=0.1,
        shear_range=0.3,
        zoom_range=0.1,
        horizontal_flip=True,
        fill_mode='nearest')
#
files = os.listdir(dataFolder)
imageList = [x for x in files if '.png' in x]

possibleModes = [str(m)+str(n) for m in range(maxMode) for n in range(maxMode)]

# Create file structure if it does not exist
if not os.path.exists(newDataFolder): os.mkdir(newDataFolder)

# Generators which read pictures in subfolders of training and validation,
# indefinitely generate batches of augmented cavity images

print('Preprocessing raw data set')
for mode in possibleModes:
       for image in [x for x in files if 'cavity'+mode in x]:
        print('Generating batch '+image)
        loaded = load_img('rawData/'+image)
        array = img_to_array(loaded)
        array = array.reshape((1,)+array.shape)
        i = 0
        for batch in trainDatagen.flow(array, batch_size=1, save_to_dir=newDataFolder,
                                       save_prefix=mode, save_format='png'):
            i += 1
            if i > imageNum: break

newFiles = os.listdir(newDataFolder)
# Adding noise
def noisy(img):
    noisy = util.random_noise(loaded, mode='gaussian', clip=True)
    return noisy

for image in newFiles:
    loaded = io.imread(newDataFolder+'/'+image)
    io.imsave(newDataFolder+'/'+image, noisy(image))
